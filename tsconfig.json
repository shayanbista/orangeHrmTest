{
  "compilerOptions": {
    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "es2016",
      "dom"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`. */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    "module": "esnext" /* Specify module code generation: 'esnext' allows for the most modern module system (ES modules). */,
    "moduleResolution": "node" /* Specify module resolution strategy to be Node-compatible. */,
    "baseUrl": "./" /* Base directory for non-relative module imports. */,
    "paths": {
      /* Add module resolution mappings (if needed). */
      "@src/*": [
        "src/*"
      ] /* Example: Resolves imports like `@src/...` to the 'src' folder. */,
      "@components/*": ["src/components/*"]
    },
    "resolveJsonModule": true /* Enable importing JSON modules. */,

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */

    /* Emit */
    "declaration": true /* Generate .d.ts files for TypeScript code. */,
    "sourceMap": true /* Generate source maps for better debugging support. */,
    "outDir": "./dist" /* Redirect output structure to the 'dist' folder. */,
    "removeComments": true /* Disable emitting comments in output. */,
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "inlineSourceMap": true,                          /* Include source maps inside emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the source maps inside the emitted JavaScript. */

    /* Interop Constraints */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. */,
    "allowSyntheticDefaultImports": true /* Allow default imports from modules with no default export. */,
    "forceConsistentCasingInFileNames": true /* Ensure consistent casing in imports. */,

    /* Type Checking */
    "strict": true /* Enable strict type-checking options for better type safety. */,
    "noImplicitAny": true /* Raise an error on expressions and declarations with an implied 'any' type. */,
    "strictNullChecks": true /* Enable strict null checks. */,
    "strictFunctionTypes": true /* Check function parameters for compatibility. */,
    "strictBindCallApply": true /* Ensure parameters for 'bind', 'call', and 'apply' match the original function. */,
    "strictPropertyInitialization": true /* Check that class properties are initialized correctly. */,
    "noImplicitThis": true /* Raise an error if 'this' is implicitly set to 'any'. */,
    "alwaysStrict": true /* Always emit 'use strict' in output. */,
    "noUnusedLocals": true /* Raise errors for unused local variables. */,
    "noUnusedParameters": true /* Raise errors for unused function parameters. */,
    "exactOptionalPropertyTypes": true /* Interpret optional properties exactly as declared. */,
    "noImplicitReturns": true /* Report errors for functions that don't return a value. */,
    "noFallthroughCasesInSwitch": true /* Raise errors for fall-through cases in switch statements. */,

    /* Completeness */
    "skipLibCheck": true /* Skip type checking of all declaration files for faster builds. */
  },
  "include": [
    "src/**/*.ts" /* Include all TypeScript files in the src folder. */,
    "cypress/**/*.ts" /* Include Cypress test files written in TypeScript. */,
    "cypress.config.ts",
    "cypress/support/index.d.ts",
    "cypress/types/**/*.d.ts" /* Include the Cypress configuration file in TypeScript. */
  ],
  "exclude": [
    "node_modules" /* Exclude node_modules folder from compilation. */,
    "**/*.test.ts" /* Optionally exclude test files. */,
    "dist" /* Exclude the dist folder to avoid re-compiling outputs. */
  ]
}
